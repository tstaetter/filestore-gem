var search_data = {"index":{"searchIndex":["filestore","filestoreexception","logger","memorymetamanager","metamanager","multitenantfilestore","oberservedsubject","observer","observeraction","simplefilestore","stdoutlogger","filestoretest","object","observerclass","otherobserverclass","testfilestore","testmetamanager","testmodule","testmultitenantfilestore","add()","add_or_update()","add_or_update()","add_to_tenant()","create_tenant_store()","debug()","error()","get()","get_data()","get_data()","get_from_tenant()","get_tenant_store()","has_id?()","has_id?()","has_tenant?()","included()","included()","info()","inform()","initialize_obs()","load_required()","locked?()","log()","new()","new()","new()","new()","new()","new()","notify()","notify()","notify()","register()","remove()","remove()","remove()","remove_from_tenant()","remove_tenant_store()","restore()","restore()","restore()","set_root_path()","setup()","shutdown()","shutdown()","shutdown()","shutdown()","teardown()","test_actions_with_observer()","test_actions_with_observer()","test_actions_with_observer()","test_inclusion()","test_init_shutdown()","test_init_shutdown()","test_registration_observer()","test_registration_observer()","test_registration_observer()","to_s()","unregister()","warn()"],"longSearchIndex":["filestore","filestore::filestoreexception","filestore::logger","filestore::memorymetamanager","filestore::metamanager","filestore::multitenantfilestore","filestore::oberservedsubject","filestore::observer","filestore::observeraction","filestore::simplefilestore","filestore::stdoutlogger","filestoretest","object","observerclass","otherobserverclass","testfilestore","testmetamanager","testmodule","testmultitenantfilestore","filestore::simplefilestore#add()","filestore::memorymetamanager#add_or_update()","filestore::metamanager#add_or_update()","filestore::multitenantfilestore#add_to_tenant()","filestore::multitenantfilestore#create_tenant_store()","filestore::stdoutlogger::debug()","filestore::stdoutlogger::error()","filestore::simplefilestore#get()","filestore::memorymetamanager#get_data()","filestore::metamanager#get_data()","filestore::multitenantfilestore#get_from_tenant()","filestore::multitenantfilestore#get_tenant_store()","filestore::memorymetamanager#has_id?()","filestore::metamanager#has_id?()","filestore::multitenantfilestore#has_tenant?()","filestore::oberservedsubject::included()","filestore::observer::included()","filestore::stdoutlogger::info()","filestore::oberservedsubject#inform()","filestore::oberservedsubject#initialize_obs()","filestore::load_required()","filestore::simplefilestore#locked?()","filestore::stdoutlogger::log()","filestore::memorymetamanager::new()","filestore::multitenantfilestore::new()","filestore::observeraction::new()","filestore::simplefilestore::new()","observerclass::new()","otherobserverclass::new()","filestore::observer#notify()","observerclass#notify()","otherobserverclass#notify()","filestore::oberservedsubject#register()","filestore::memorymetamanager#remove()","filestore::metamanager#remove()","filestore::simplefilestore#remove()","filestore::multitenantfilestore#remove_from_tenant()","filestore::multitenantfilestore#remove_tenant_store()","filestore::memorymetamanager#restore()","filestore::metamanager#restore()","filestore::simplefilestore#restore()","filestore::multitenantfilestore#set_root_path()","filestoretest#setup()","filestore::memorymetamanager#shutdown()","filestore::metamanager#shutdown()","filestore::multitenantfilestore#shutdown()","filestore::simplefilestore#shutdown()","filestoretest#teardown()","testfilestore#test_actions_with_observer()","testmetamanager#test_actions_with_observer()","testmultitenantfilestore#test_actions_with_observer()","testmodule#test_inclusion()","testfilestore#test_init_shutdown()","testmetamanager#test_init_shutdown()","testfilestore#test_registration_observer()","testmetamanager#test_registration_observer()","testmultitenantfilestore#test_registration_observer()","filestore::observeraction#to_s()","filestore::oberservedsubject#unregister()","filestore::stdoutlogger::warn()"],"info":[["FileStore","","FileStore.html","","<p>log.rb @author Thomas Stätter @date 2012/11/26 @description\n<p>meta_manager.rb\n<p>author: Thomas Stätter date: …\n"],["FileStore::FileStoreException","","FileStore/FileStoreException.html","","<p>Base exception class used for errors occurring in this module\n"],["FileStore::Logger","","FileStore/Logger.html","","<p>Mix-in module for logging capabilities\n"],["FileStore::MemoryMetaManager","","FileStore/MemoryMetaManager.html","","<p>Class implementing a memory based MetaManager\n"],["FileStore::MetaManager","","FileStore/MetaManager.html","","<p>Base class for implementing a meta manager class. This class is used for\nstoring and managing file meta …\n"],["FileStore::MultiTenantFileStore","","FileStore/MultiTenantFileStore.html","","<p>Singleton class implementing a multitenant file store\n"],["FileStore::OberservedSubject","","FileStore/OberservedSubject.html","","<p>Module FileStore::OberservedSubject can be mixed in to implement an \nobserved object.\n"],["FileStore::Observer","","FileStore/Observer.html","","<p>Module FileStore::Observer can be mixed in to implement a  observer.\nObservers are notified about actions …\n"],["FileStore::ObserverAction","","FileStore/ObserverAction.html","","<p>Class FileStore::ObserverAction is used to encapsulate information \ndescribing actions occurring in an …\n"],["FileStore::SimpleFileStore","","FileStore/SimpleFileStore.html","","<p>Main library class implementing a simple file store used for storing and\nmanaging  arbitrary files\n"],["FileStore::StdoutLogger","","FileStore/StdoutLogger.html","","<p>Simple logger class for stdout logging\n"],["FileStoreTest","","FileStoreTest.html","",""],["Object","","Object.html","",""],["ObserverClass","","ObserverClass.html","",""],["OtherObserverClass","","OtherObserverClass.html","",""],["TestFileStore","","TestFileStore.html","",""],["TestMetaManager","","TestMetaManager.html","",""],["TestModule","","TestModule.html","",""],["TestMultiTenantFileStore","","TestMultiTenantFileStore.html","",""],["add","FileStore::SimpleFileStore","FileStore/SimpleFileStore.html#method-i-add","(file, meta = {}, shouldMove = true)","<p>Adds a file to the store\n<p>Arguments:\n\n<pre>file: The file to be stored\nmeta: Optional meta data to be stored along ...</pre>\n"],["add_or_update","FileStore::MemoryMetaManager","FileStore/MemoryMetaManager.html#method-i-add_or_update","(id, metaData)","<p>see: MetaManager::add_or_update\n"],["add_or_update","FileStore::MetaManager","FileStore/MetaManager.html#method-i-add_or_update","(id, metaData)","<p>Adds/updates a dataset to/in the collection\n<p>Arguments:\n\n<pre>id: The key to identify the data to be deleted\nmetaData: ...</pre>\n"],["add_to_tenant","FileStore::MultiTenantFileStore","FileStore/MultiTenantFileStore.html#method-i-add_to_tenant","(tenant, file, md = {})","<p>Adds a file to the tenant’s store\n<p>Arguments:\n\n<pre>tenant: The tenant's ID\nfile: The file to be added\nmd: Optional ...</pre>\n"],["create_tenant_store","FileStore::MultiTenantFileStore","FileStore/MultiTenantFileStore.html#method-i-create_tenant_store","(id = '')","<p>Creates a new file store for a tenant\n<p>Arguments:\n\n<pre>id: The optional ID of the tenant. If omitted, an ID will ...</pre>\n"],["debug","FileStore::StdoutLogger","FileStore/StdoutLogger.html#method-c-debug","(msg)",""],["error","FileStore::StdoutLogger","FileStore/StdoutLogger.html#method-c-error","(msg)",""],["get","FileStore::SimpleFileStore","FileStore/SimpleFileStore.html#method-i-get","(id)","<p>Retrieves a file identified by it’s ID\n<p>Arguments:\n\n<pre>id: The files ID to retrieve</pre>\n"],["get_data","FileStore::MemoryMetaManager","FileStore/MemoryMetaManager.html#method-i-get_data","(id)","<p>see: MetaManager::get_data\n"],["get_data","FileStore::MetaManager","FileStore/MetaManager.html#method-i-get_data","(id)","<p>Returns the data set identified by the given id\n<p>Arguments:\n\n<pre>id: The ID to be looked for</pre>\n"],["get_from_tenant","FileStore::MultiTenantFileStore","FileStore/MultiTenantFileStore.html#method-i-get_from_tenant","(tenant, id)","<p>Retrieves a file from the tenant’s store\n<p>Arguments:\n\n<pre>tenant: The tenant's ID\nfile: The file to be retrieved</pre>\n"],["get_tenant_store","FileStore::MultiTenantFileStore","FileStore/MultiTenantFileStore.html#method-i-get_tenant_store","(id)","<p>Returns the complete file store for a given tenant\n<p>Arguments:\n\n<pre>id: The tenant's ID</pre>\n"],["has_id?","FileStore::MemoryMetaManager","FileStore/MemoryMetaManager.html#method-i-has_id-3F","(id)","<p>see: MetaManager::has_id?\n"],["has_id?","FileStore::MetaManager","FileStore/MetaManager.html#method-i-has_id-3F","(id)","<p>Determines wether a given ID is already in use\n<p>Arguments:\n\n<pre>id: The ID to be tested</pre>\n"],["has_tenant?","FileStore::MultiTenantFileStore","FileStore/MultiTenantFileStore.html#method-i-has_tenant-3F","(id)","<p>Determines wether a tenant is registered\n<p>Arguments:\n\n<pre>tenant: The tenant's ID to be tested</pre>\n"],["included","FileStore::OberservedSubject","FileStore/OberservedSubject.html#method-c-included","(klass)","<p>Module hook executed after the inclusion. Currently nothing happens here\n"],["included","FileStore::Observer","FileStore/Observer.html#method-c-included","(klass)","<p>Module hook executed after the inclusion. Currently nothing happens here\n"],["info","FileStore::StdoutLogger","FileStore/StdoutLogger.html#method-c-info","(msg)",""],["inform","FileStore::OberservedSubject","FileStore/OberservedSubject.html#method-i-inform","(msg)","<p>Informs registered observers about an action\n<p>Arguments:\n\n<pre>msg: Some information sent to all registered observers</pre>\n"],["initialize_obs","FileStore::OberservedSubject","FileStore/OberservedSubject.html#method-i-initialize_obs","()","<p>Initializes needed attributes for implementing observer. Should be called\nin any constructor including …\n"],["load_required","FileStore","FileStore.html#method-c-load_required","()","<p>Loads required libs as defined in FileStore::LIB_FILES\n"],["locked?","FileStore::SimpleFileStore","FileStore/SimpleFileStore.html#method-i-locked-3F","()","<p>Determines wether this store is locked\n"],["log","FileStore::StdoutLogger","FileStore/StdoutLogger.html#method-c-log","(level, msg)",""],["new","FileStore::MemoryMetaManager","FileStore/MemoryMetaManager.html#method-c-new","(persistentFile = '', logger)","<p>Creates a new instance of MemoryMetaManager\n<p>Arguments:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">persistentFile</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-constant\">The</span> <span class=\"ruby-identifier\">file</span> <span class=\"ruby-identifier\">where</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">manager</span> <span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","FileStore::MultiTenantFileStore","FileStore/MultiTenantFileStore.html#method-c-new","()","<p>Initializes a new instance of MultiTenantFileStore\n"],["new","FileStore::ObserverAction","FileStore/ObserverAction.html#method-c-new","(type = TYPE_DEFAULT, objects = [], message = \"\")",""],["new","FileStore::SimpleFileStore","FileStore/SimpleFileStore.html#method-c-new","(metaManager, rootPath = '.', logger)","<p>Initializes a new instance of SimpleFileStore\n<p>Arguments:\n\n<pre>metaManager: The meta data manager instance to ...</pre>\n"],["new","ObserverClass","ObserverClass.html#method-c-new","()",""],["new","OtherObserverClass","OtherObserverClass.html#method-c-new","()",""],["notify","FileStore::Observer","FileStore/Observer.html#method-i-notify","(msg, subject)","<p>Method called via the observed subject to inform observers about an action\noccurred in the observed subject. …\n"],["notify","ObserverClass","ObserverClass.html#method-i-notify","(msg, obj)",""],["notify","OtherObserverClass","OtherObserverClass.html#method-i-notify","(msg, obj)",""],["register","FileStore::OberservedSubject","FileStore/OberservedSubject.html#method-i-register","(obj)","<p>Registers an concrete observer\n<p>Arguments:\n\n<pre>obj: The object added as an observer. Must be an instance of ...</pre>\n"],["remove","FileStore::MemoryMetaManager","FileStore/MemoryMetaManager.html#method-i-remove","(id)","<p>see: MetaManager::remove\n"],["remove","FileStore::MetaManager","FileStore/MetaManager.html#method-i-remove","(id)","<p>Removes a dataset from the collection\n<p>Arguments:\n\n<pre>id: The key to identify the data to be deleted</pre>\n"],["remove","FileStore::SimpleFileStore","FileStore/SimpleFileStore.html#method-i-remove","(id)","<p>Moves a file from the current to the deleted store\n<p>Arguments:\n\n<pre>id: The ID identifying the file to be moved</pre>\n"],["remove_from_tenant","FileStore::MultiTenantFileStore","FileStore/MultiTenantFileStore.html#method-i-remove_from_tenant","(tenant, id)","<p>Removes a file from the tenant’s store\n<p>Arguments:\n\n<pre>tenant: The tenant's ID\nid: The ID of the file to be ...</pre>\n"],["remove_tenant_store","FileStore::MultiTenantFileStore","FileStore/MultiTenantFileStore.html#method-i-remove_tenant_store","(id)","<p>Permanently removes a tenant’s store\n<p>Arguments:\n\n<pre>id: The tenant's ID</pre>\n"],["restore","FileStore::MemoryMetaManager","FileStore/MemoryMetaManager.html#method-i-restore","(id)","<p>see: MetaManager::restore\n"],["restore","FileStore::MetaManager","FileStore/MetaManager.html#method-i-restore","(id)","<p>Restores a previously deleted meta data set\n<p>Arguments:\n\n<pre>id: The key to identify the data to be deleted</pre>\n"],["restore","FileStore::SimpleFileStore","FileStore/SimpleFileStore.html#method-i-restore","(id)","<p>Restores a file identified by it’s id\n<p>Arguments:\n\n<pre>id: The file ID</pre>\n"],["set_root_path","FileStore::MultiTenantFileStore","FileStore/MultiTenantFileStore.html#method-i-set_root_path","(rootPath)","<p>Sets the root path of the multitenant store. As\nFileStore::MultiTenantFileStore is a singleton class, …\n"],["setup","FileStoreTest","FileStoreTest.html#method-i-setup","()",""],["shutdown","FileStore::MemoryMetaManager","FileStore/MemoryMetaManager.html#method-i-shutdown","()","<p>see: MetaManager::shutdown\n"],["shutdown","FileStore::MetaManager","FileStore/MetaManager.html#method-i-shutdown","()","<p>Shuts down the manager class and clears all used resources\n"],["shutdown","FileStore::MultiTenantFileStore","FileStore/MultiTenantFileStore.html#method-i-shutdown","()","<p>Shuts down this multitenant store\n"],["shutdown","FileStore::SimpleFileStore","FileStore/SimpleFileStore.html#method-i-shutdown","()","<p>Shuts down the file store\n"],["teardown","FileStoreTest","FileStoreTest.html#method-i-teardown","()",""],["test_actions_with_observer","TestFileStore","TestFileStore.html#method-i-test_actions_with_observer","()",""],["test_actions_with_observer","TestMetaManager","TestMetaManager.html#method-i-test_actions_with_observer","()",""],["test_actions_with_observer","TestMultiTenantFileStore","TestMultiTenantFileStore.html#method-i-test_actions_with_observer","()",""],["test_inclusion","TestModule","TestModule.html#method-i-test_inclusion","()",""],["test_init_shutdown","TestFileStore","TestFileStore.html#method-i-test_init_shutdown","()",""],["test_init_shutdown","TestMetaManager","TestMetaManager.html#method-i-test_init_shutdown","()",""],["test_registration_observer","TestFileStore","TestFileStore.html#method-i-test_registration_observer","()",""],["test_registration_observer","TestMetaManager","TestMetaManager.html#method-i-test_registration_observer","()",""],["test_registration_observer","TestMultiTenantFileStore","TestMultiTenantFileStore.html#method-i-test_registration_observer","()",""],["to_s","FileStore::ObserverAction","FileStore/ObserverAction.html#method-i-to_s","()",""],["unregister","FileStore::OberservedSubject","FileStore/OberservedSubject.html#method-i-unregister","(obj)","<p>Removes a concrete observer\n<p>Arguments:\n\n<pre>obj: The observer to be removed. Obviously, it needs to be\n    registered ...</pre>\n"],["warn","FileStore::StdoutLogger","FileStore/StdoutLogger.html#method-c-warn","(msg)",""]]}}